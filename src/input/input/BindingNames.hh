#pragma once

#include <robin_hood.h>
#include <string>

namespace sp {
    // Global Mouse + Keyboard
    static const std::string INPUT_EVENT_KEYBOARD_KEY = "/keyboard/key"; // int
    static const std::string INPUT_EVENT_KEYBOARD_CHARACTERS = "/keyboard/characters"; // char
    static const std::string INPUT_EVENT_MOUSE_CLICK = "/mouse/click"; // glm::vec2
    static const std::string INPUT_EVENT_MOUSE_SCROLL = "/mouse/scroll"; // glm::vec2
    static const std::string INPUT_EVENT_MOUSE_MOVE = "/mouse/move"; // glm::vec2

    static const std::string INPUT_SIGNAL_KEYBOARD_KEY_BASE = "key_";
    static const std::string INPUT_SIGNAL_MOUSE_BUTTON_LEFT = "mouse_button_left";
    static const std::string INPUT_SIGNAL_MOUSE_BUTTON_MIDDLE = "mouse_button_middle";
    static const std::string INPUT_SIGNAL_MOUSE_BUTTON_RIGHT = "mouse_button_right";
    static const std::string INPUT_SIGNAL_MOUSE_CURSOR_X = "mouse_cursor_x";
    static const std::string INPUT_SIGNAL_MOUSE_CURSOR_Y = "mouse_cursor_y";

    // Menu
    static const std::string INPUT_EVENT_TOGGLE_CONSOLE = "/action/toggle_console"; // bool
    static const std::string INPUT_EVENT_MENU_OPEN = "/action/menu/open"; // bool
    static const std::string INPUT_EVENT_MENU_BACK = "/action/menu/back"; // bool
    static const std::string INPUT_EVENT_MENU_ENTER = "/action/menu/enter"; // bool
    static const std::string INPUT_EVENT_MENU_SCROLL = "/action/menu/scroll"; // glm::vec2
    static const std::string INPUT_EVENT_MENU_TEXT_INPUT = "/action/menu/text_input"; // char

    static const std::string INPUT_SIGNAL_MENU_BUTTON_LEFT = "menu_button_left";
    static const std::string INPUT_SIGNAL_MENU_BUTTON_MIDDLE = "menu_button_middle";
    static const std::string INPUT_SIGNAL_MENU_BUTTON_RIGHT = "menu_button_right";
    static const std::string INPUT_SIGNAL_MENU_CURSOR_X = "menu_cursor_x";
    static const std::string INPUT_SIGNAL_MENU_CURSOR_Y = "menu_cursor_y";

    // Player / HumanController
    static const std::string INPUT_SIGNAL_MOVE_FORWARD = "move_forward";
    static const std::string INPUT_SIGNAL_MOVE_LEFT = "move_left";
    static const std::string INPUT_SIGNAL_MOVE_RIGHT = "move_right";
    static const std::string INPUT_SIGNAL_MOVE_BACK = "move_back";
    static const std::string INPUT_SIGNAL_MOVE_CROUCH = "move_crouch";
    static const std::string INPUT_SIGNAL_MOVE_JUMP = "move_jump";
    static const std::string INPUT_SIGNAL_MOVE_SPRINT = "move_sprint";
    static const std::string INPUT_SIGNAL_INTERACT_ROTATE = "interact_rotate";

    static const std::string INPUT_EVENT_CAMERA_ROTATE = "/action/camera_rotate"; // glm::vec2
    static const std::string INPUT_EVENT_INTERACT = "/action/interact"; // bool
    static const std::string INPUT_EVENT_SPAWN_DEBUG = "/action/spawn_debug"; // bool
    static const std::string INPUT_EVENT_PLACE_FLASHLIGHT = "/action/place"; // bool

    // Keycodes matching GLFW keys
    enum KeyCode : int {
        KEY_SPACE = 32,
        KEY_APOSTROPHE = 39,
        KEY_COMMA = 44,
        KEY_MINUS = 45,
        KEY_PERIOD = 46,
        KEY_SLASH = 47,
        KEY_0 = 48,
        KEY_1 = 49,
        KEY_2 = 50,
        KEY_3 = 51,
        KEY_4 = 52,
        KEY_5 = 53,
        KEY_6 = 54,
        KEY_7 = 55,
        KEY_8 = 56,
        KEY_9 = 57,
        KEY_SEMICOLON = 59,
        KEY_EQUALS = 61,
        KEY_A = 65,
        KEY_B = 66,
        KEY_C = 67,
        KEY_D = 68,
        KEY_E = 69,
        KEY_F = 70,
        KEY_G = 71,
        KEY_H = 72,
        KEY_I = 73,
        KEY_J = 74,
        KEY_K = 75,
        KEY_L = 76,
        KEY_M = 77,
        KEY_N = 78,
        KEY_O = 79,
        KEY_P = 80,
        KEY_Q = 81,
        KEY_R = 82,
        KEY_S = 83,
        KEY_T = 84,
        KEY_U = 85,
        KEY_V = 86,
        KEY_W = 87,
        KEY_X = 88,
        KEY_Y = 89,
        KEY_Z = 90,
        KEY_LEFT_BRACKET = 91,
        KEY_BACKSLASH = 92,
        KEY_RIGHT_BRACKET = 93,
        KEY_BACKTICK = 96,
        KEY_ESCAPE = 256,
        KEY_ENTER = 257,
        KEY_TAB = 258,
        KEY_BACKSPACE = 259,
        KEY_INSERT = 260,
        KEY_DELETE = 261,
        KEY_RIGHT_ARROW = 262,
        KEY_LEFT_ARROW = 263,
        KEY_DOWN_ARROW = 264,
        KEY_UP_ARROW = 265,
        KEY_PAGE_UP = 266,
        KEY_PAGE_DOWN = 267,
        KEY_HOME = 268,
        KEY_END = 269,
        KEY_CAPS_LOCK = 280,
        KEY_SCROLL_LOCK = 281,
        KEY_NUM_LOCK = 282,
        KEY_PRINT_SCREEN = 283,
        KEY_PAUSE = 284,
        KEY_F1 = 290,
        KEY_F2 = 291,
        KEY_F3 = 292,
        KEY_F4 = 293,
        KEY_F5 = 294,
        KEY_F6 = 295,
        KEY_F7 = 296,
        KEY_F8 = 297,
        KEY_F9 = 298,
        KEY_F10 = 299,
        KEY_F11 = 300,
        KEY_F12 = 301,
        KEY_F13 = 302,
        KEY_F14 = 303,
        KEY_F15 = 304,
        KEY_F16 = 305,
        KEY_F17 = 306,
        KEY_F18 = 307,
        KEY_F19 = 308,
        KEY_F20 = 309,
        KEY_F21 = 310,
        KEY_F22 = 311,
        KEY_F23 = 312,
        KEY_F24 = 313,
        KEY_F25 = 314,
        KEY_0_NUMPAD = 320,
        KEY_1_NUMPAD = 321,
        KEY_2_NUMPAD = 322,
        KEY_3_NUMPAD = 323,
        KEY_4_NUMPAD = 324,
        KEY_5_NUMPAD = 325,
        KEY_6_NUMPAD = 326,
        KEY_7_NUMPAD = 327,
        KEY_8_NUMPAD = 328,
        KEY_9_NUMPAD = 329,
        KEY_DECIMAL_NUMPAD = 330,
        KEY_DIVIDE_NUMPAD = 331,
        KEY_MULTIPLY_NUMPAD = 332,
        KEY_SUBTRACT_NUMPAD = 333,
        KEY_ADD_NUMPAD = 334,
        KEY_ENTER_NUMPAD = 335,
        KEY_EQUALS_NUMPAD = 336,
        KEY_LEFT_SHIFT = 340,
        KEY_LEFT_CONTROL = 341,
        KEY_LEFT_ALT = 342,
        KEY_LEFT_SUPER = 343,
        KEY_RIGHT_SHIFT = 344,
        KEY_RIGHT_CONTROL = 345,
        KEY_RIGHT_ALT = 346,
        KEY_RIGHT_SUPER = 347,
    };

    static robin_hood::unordered_flat_map<int, std::string> KeycodeSignalLookup = {
        {KEY_SPACE, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "space"},
        {KEY_APOSTROPHE, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "apostrophe"},
        {KEY_COMMA, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "comma"},
        {KEY_MINUS, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "minus"},
        {KEY_PERIOD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "period"},
        {KEY_SLASH, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "slash"},
        {KEY_0, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "0"},
        {KEY_1, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "1"},
        {KEY_2, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "2"},
        {KEY_3, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "3"},
        {KEY_4, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "4"},
        {KEY_5, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "5"},
        {KEY_6, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "6"},
        {KEY_7, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "7"},
        {KEY_8, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "8"},
        {KEY_9, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "9"},
        {KEY_SEMICOLON, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "semicolon"},
        {KEY_EQUALS, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "equals"},
        {KEY_A, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "a"},
        {KEY_B, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "b"},
        {KEY_C, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "c"},
        {KEY_D, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "d"},
        {KEY_E, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "e"},
        {KEY_F, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f"},
        {KEY_G, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "g"},
        {KEY_H, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "h"},
        {KEY_I, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "i"},
        {KEY_J, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "j"},
        {KEY_K, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "k"},
        {KEY_L, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "l"},
        {KEY_M, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "m"},
        {KEY_N, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "n"},
        {KEY_O, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "o"},
        {KEY_P, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "p"},
        {KEY_Q, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "q"},
        {KEY_R, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "r"},
        {KEY_S, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "s"},
        {KEY_T, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "t"},
        {KEY_U, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "u"},
        {KEY_V, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "v"},
        {KEY_W, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "w"},
        {KEY_X, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "x"},
        {KEY_Y, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "y"},
        {KEY_Z, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "z"},
        {KEY_LEFT_BRACKET, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "left_bracket"},
        {KEY_BACKSLASH, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "backslash"},
        {KEY_RIGHT_BRACKET, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "right_bracket"},
        {KEY_BACKTICK, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "backtick"},
        {KEY_ESCAPE, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "escape"},
        {KEY_ENTER, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "enter"},
        {KEY_TAB, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "tab"},
        {KEY_BACKSPACE, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "backspace"},
        {KEY_INSERT, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "insert"},
        {KEY_DELETE, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "delete"},
        {KEY_RIGHT_ARROW, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "right_arrow"},
        {KEY_LEFT_ARROW, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "left_arrow"},
        {KEY_DOWN_ARROW, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "down_arrow"},
        {KEY_UP_ARROW, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "up_arrow"},
        {KEY_PAGE_UP, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "page_up"},
        {KEY_PAGE_DOWN, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "page_down"},
        {KEY_HOME, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "home"},
        {KEY_END, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "end"},
        {KEY_CAPS_LOCK, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "caps_lock"},
        {KEY_SCROLL_LOCK, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "scroll_lock"},
        {KEY_NUM_LOCK, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "num_lock"},
        {KEY_PRINT_SCREEN, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "print_screen"},
        {KEY_PAUSE, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "pause"},
        {KEY_F1, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f1"},
        {KEY_F2, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f2"},
        {KEY_F3, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f3"},
        {KEY_F4, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f4"},
        {KEY_F5, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f5"},
        {KEY_F6, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f6"},
        {KEY_F7, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f7"},
        {KEY_F8, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f8"},
        {KEY_F9, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f9"},
        {KEY_F10, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f10"},
        {KEY_F11, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f11"},
        {KEY_F12, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f12"},
        {KEY_F13, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f13"},
        {KEY_F14, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f14"},
        {KEY_F15, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f15"},
        {KEY_F16, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f16"},
        {KEY_F17, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f17"},
        {KEY_F18, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f18"},
        {KEY_F19, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f19"},
        {KEY_F20, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f20"},
        {KEY_F21, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f21"},
        {KEY_F22, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f22"},
        {KEY_F23, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f23"},
        {KEY_F24, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f24"},
        {KEY_F25, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "f25"},
        {KEY_0_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "0_numpad"},
        {KEY_1_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "1_numpad"},
        {KEY_2_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "2_numpad"},
        {KEY_3_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "3_numpad"},
        {KEY_4_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "4_numpad"},
        {KEY_5_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "5_numpad"},
        {KEY_6_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "6_numpad"},
        {KEY_7_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "7_numpad"},
        {KEY_8_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "8_numpad"},
        {KEY_9_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "9_numpad"},
        {KEY_DECIMAL_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "period_numpad"},
        {KEY_DIVIDE_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "divide_numpad"},
        {KEY_MULTIPLY_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "multiply_numpad"},
        {KEY_SUBTRACT_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "minus_numpad"},
        {KEY_ADD_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "plus_numpad"},
        {KEY_ENTER_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "enter_numpad"},
        {KEY_EQUALS_NUMPAD, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "equals_numpad"},
        {KEY_LEFT_SHIFT, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "left_shift"},
        {KEY_LEFT_CONTROL, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "left_control"},
        {KEY_LEFT_ALT, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "left_alt"},
        {KEY_LEFT_SUPER, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "left_super"},
        {KEY_RIGHT_SHIFT, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "right_shift"},
        {KEY_RIGHT_CONTROL, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "right_control"},
        {KEY_RIGHT_ALT, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "right_alt"},
        {KEY_RIGHT_SUPER, INPUT_SIGNAL_KEYBOARD_KEY_BASE + "right_super"},
    };

    // All inputs in lowercase to allow for case-insensitivity
    static robin_hood::unordered_flat_map<std::string, std::string> UserBindingAliases = {
        {" ", "space"},
        {"'", "apostrophe"},
        {",", "comma"},
        {"-", "minus"},
        {".", "period"},
        {"/", "slash"},
        {";", "semicolon"},
        {"=", "equals"},
        {"[", "left_bracket"},
        {"\\", "backslash"},
        {"]", "right_bracket"},
        {"grave_accent", "backtick"},
        {"`", "backtick"},

        {"esc", "escape"},
        {"del", "delete"},
        {"right", "arrow_right"},
        {"left", "arrow_left"},
        {"down", "arrow_down"},
        {"up", "arrow_up"},
        {"capslock", "caps_lock"},
        {"scrolllock", "scroll_lock"},
        {"numlock", "num_lock"},
        {"printscreen", "print_screen"},

        {"numpad_0", "0_numpad"},
        {"num_0", "0_numpad"},
        {"numpad_1", "1_numpad"},
        {"num_1", "1_numpad"},
        {"numpad_2", "2_numpad"},
        {"num_2", "2_numpad"},
        {"numpad_3", "3_numpad"},
        {"num_3", "3_numpad"},
        {"numpad_4", "4_numpad"},
        {"num_4", "4_numpad"},
        {"numpad_5", "5_numpad"},
        {"num_5", "5_numpad"},
        {"numpad_6", "6_numpad"},
        {"num_6", "6_numpad"},
        {"numpad_7", "7_numpad"},
        {"num_7", "7_numpad"},
        {"numpad_8", "8_numpad"},
        {"num_8", "8_numpad"},
        {"numpad_9", "9_numpad"},
        {"num_9", "9_numpad"},

        {"numpad_period", "period_numpad"},
        {"num_period", "period_numpad"},
        {"numpad_decimal", "period_numpad"},
        {"num_decimal", "period_numpad"},

        {"numpad_divide", "divide_numpad"},
        {"num_divide", "divide_numpad"},

        {"numpad_multiply", "multiply_numpad"},
        {"num_multiply", "multiply_numpad"},

        {"numpad_minus", "minus_numpad"},
        {"num_minus", "minus_numpad"},
        {"numpad_subtract", "minus_numpad"},
        {"num_subtract", "minus_numpad"},

        {"numpad_plus", "plus_numpad"},
        {"num_plus", "plus_numpad"},
        {"numpad_add", "plus_numpad"},
        {"num_add", "plus_numpad"},

        {"numpad_enter", "enter_numpad"},
        {"num_enter", "enter_numpad"},

        {"numpad_equals", "equals_numpad"},
        {"num_equals", "equals_numpad"},

        {"shift_left", "shift_left"},
        {"control_left", "control_left"},
        {"alt_left", "alt_left"},
        {"super_left", "super_left"},
        {"shift_right", "shift_right"},
        {"control_right", "control_right"},
        {"alt_right", "alt_right"},
        {"super_right", "super_right"},
    };
} // namespace sp
