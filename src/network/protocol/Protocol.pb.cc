// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class MessageDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
static void InitDefaultsscc_info_Message_Protocol_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_Message_default_instance_;
        new (ptr)::Message();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_Protocol_2eproto = {
    {ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
     0,
     0,
     InitDefaultsscc_info_Message_Protocol_2eproto},
    {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protocol_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *file_level_enum_descriptors_Protocol_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_Protocol_2eproto =
    nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Message, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::Message, action_),
    PROTOBUF_FIELD_OFFSET(::Message, id_),
    PROTOBUF_FIELD_OFFSET(::Message, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_Message_default_instance_),
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\016Protocol.proto\"~\n\007Message\022\037\n\006action\030\001 "
    "\001(\0162\017.Message.Action\022\n\n\002id\030\002 \001(\004\022\014\n\004data"
    "\030\003 \001(\t\"8\n\006Action\022\010\n\004PING\020\000\022\021\n\rCREATE_ENT"
    "ITY\020\001\022\021\n\rUPDATE_ENTITY\020\002b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_Protocol_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_Protocol_2eproto_sccs[1] = {
    &scc_info_Message_Protocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto = {
    false,
    false,
    descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    152,
    &descriptor_table_Protocol_2eproto_once,
    descriptor_table_Protocol_2eproto_sccs,
    descriptor_table_Protocol_2eproto_deps,
    1,
    0,
    schemas,
    file_default_instances,
    TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto,
    1,
    file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Protocol_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Protocol_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Message_Action_descriptor() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
    return file_level_enum_descriptors_Protocol_2eproto[0];
}
bool Message_Action_IsValid(int value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
        return true;
    default:
        return false;
    }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Message_Action Message::PING;
constexpr Message_Action Message::CREATE_ENTITY;
constexpr Message_Action Message::UPDATE_ENTITY;
constexpr Message_Action Message::Action_MIN;
constexpr Message_Action Message::Action_MAX;
constexpr int Message::Action_ARRAYSIZE;
#endif // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Message::InitAsDefaultInstance() {}
class Message::_Internal {
public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena *arena) : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:Message)
}
Message::Message(const Message &from) : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_data().empty()) {
        data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(), GetArena());
    }
    ::memcpy(
        &id_,
        &from.id_,
        static_cast<size_t>(reinterpret_cast<char *>(&action_) - reinterpret_cast<char *>(&id_)) + sizeof(action_));
    // @@protoc_insertion_point(copy_constructor:Message)
}

void Message::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_Protocol_2eproto.base);
    data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(
        &id_,
        0,
        static_cast<size_t>(reinterpret_cast<char *>(&action_) - reinterpret_cast<char *>(&id_)) + sizeof(action_));
}

Message::~Message() {
    // @@protoc_insertion_point(destructor:Message)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
    GOOGLE_DCHECK(GetArena() == nullptr);
    data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message::ArenaDtor(void *object) {
    Message *_this = reinterpret_cast<Message *>(object);
    (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void Message::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}
const Message &Message::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_Protocol_2eproto.base);
    return *internal_default_instance();
}

void Message::Clear() {
    // @@protoc_insertion_point(message_clear_start:Message)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(
        &id_,
        0,
        static_cast<size_t>(reinterpret_cast<char *>(&action_) - reinterpret_cast<char *>(&id_)) + sizeof(action_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Message::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                                                        \
    if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
        // .Message.Action action = 1;
        case 1:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                CHK_(ptr);
                _internal_set_action(static_cast<::Message_Action>(val));
            } else
                goto handle_unusual;
            continue;
        // uint64 id = 2;
        case 2:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        // string data = 3;
        case 3:
            if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                auto str = _internal_mutable_data();
                ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Message.data"));
                CHK_(ptr);
            } else
                goto handle_unusual;
            continue;
        default: {
        handle_unusual:
            if ((tag & 7) == 4 || tag == 0) {
                ctx->SetLastTag(tag);
                goto success;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx);
            CHK_(ptr != nullptr);
            continue;
        }
        } // switch
    } // while
success:
    return ptr;
failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:Message)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .Message.Action action = 1;
    if (this->action() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(1,
                                                                                     this->_internal_action(),
                                                                                     target);
    }

    // uint64 id = 2;
    if (this->id() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
    }

    // string data = 3;
    if (this->data().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_data().data(),
            static_cast<int>(this->_internal_data().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "Message.data");
        target = stream->WriteStringMaybeAliased(3, this->_internal_data(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:Message)
    return target;
}

size_t Message::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:Message)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string data = 3;
    if (this->data().size() > 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_data());
    }

    // uint64 id = 2;
    if (this->id() != 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(this->_internal_id());
    }

    // .Message.Action action = 1;
    if (this->action() != 0) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(_internal_metadata_,
                                                                           total_size,
                                                                           &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_merge_from_start:Message)
    GOOGLE_DCHECK_NE(&from, this);
    const Message *source = ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(&from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:Message)
        MergeFrom(*source);
    }
}

void Message::MergeFrom(const Message &from) {
    // @@protoc_insertion_point(class_specific_merge_from_start:Message)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.data().size() > 0) { _internal_set_data(from._internal_data()); }
    if (from.id() != 0) { _internal_set_id(from._internal_id()); }
    if (from.action() != 0) { _internal_set_action(from._internal_action()); }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
    // @@protoc_insertion_point(generalized_copy_from_start:Message)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void Message::CopyFrom(const Message &from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:Message)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool Message::IsInitialized() const {
    return true;
}

void Message::InternalSwap(Message *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<PROTOBUF_FIELD_OFFSET(Message, action_) + sizeof(Message::action_) -
                                               PROTOBUF_FIELD_OFFSET(Message, id_)>(
        reinterpret_cast<char *>(&id_),
        reinterpret_cast<char *>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
    return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<>
PROTOBUF_NOINLINE ::Message *Arena::CreateMaybeMessage<::Message>(Arena *arena) {
    return Arena::CreateMessageInternal<::Message>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
