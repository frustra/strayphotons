#version 430

##import lib/util
##import lib/types_common

layout (binding = 0) uniform sampler3D voxelRadiance;
layout (binding = 1) uniform sampler3D voxelRadianceMips;
layout (binding = 2) uniform sampler2D shadowMap;
layout (binding = 3) uniform sampler2DArray mirrorShadowMap;
layout (binding = 0, rgba32f) writeonly uniform image2D values;

uniform int sensorCount = 0;

layout (binding = 0, std140) uniform LightSensorData {
	LightSensor sensors[MAX_LIGHT_SENSORS];
};

uniform int lightCount = 0;

layout(binding = 1, std140) uniform LightData {
	Light lights[MAX_LIGHTS];
};

layout(binding = 2, std140) uniform GLVoxelInfo {
	VoxelInfo voxelInfo;
};

#define DIFFUSE_ONLY_SHADING
#define INCLUDE_MIRRORS
##import lib/mirror_shadow_common
##import lib/shading

##import voxel_shared
##import voxel_trace_shared

layout (local_size_x = MAX_LIGHT_SENSORS) in;

void main() {
	uint index = gl_LocalInvocationIndex;
	if (index >= sensorCount)
		return;

	LightSensor sensor = sensors[index];

	vec3 lum = vec3(0.0);

	lum += DirectShading(sensor.position, vec3(1.0), sensor.direction, sensor.direction);
	lum += HemisphereIndirectDiffuse(sensor.position, sensor.direction, vec2(0));

	// first value r=1 indicates result is populated
	imageStore(values, ivec2(index * 2, 0), vec4(1, sensor.id0, sensor.id1, 0));
	imageStore(values, ivec2(index * 2 + 1, 0), vec4(lum, 0));
}
