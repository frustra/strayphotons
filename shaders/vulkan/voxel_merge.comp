#version 460

layout(local_size_x = 16, local_size_y = 16) in;

#include "../lib/voxel_shared.glsl"

layout(binding = 0, rgba16f) uniform image3D voxelRadiance;

layout(std430, binding = 1) buffer VoxelFragmentList {
    uint count;
    uint capacity;
    VkDispatchIndirectCommand cmd;
    VoxelFragment overflowList[];
};

#include "../lib/types_common.glsl"
#include "../lib/util.glsl"
#include "../lib/voxel_shared.glsl"

layout(constant_id = 0) const int FRAGMENT_LIST_INDEX = 1;

void main() {
    uint index = gl_WorkGroupID.x * (gl_WorkGroupSize.x * gl_WorkGroupSize.y) + gl_LocalInvocationIndex;
    if (index >= count) return;

    ivec3 position = ivec3(overflowList[index].position);
    vec3 overflowRadiance = vec3(overflowList[index].radiance);
    vec4 existingRadiance = imageLoad(voxelRadiance, position);

    float weight = 1.0f / (FRAGMENT_LIST_INDEX + 1);
    imageStore(voxelRadiance, position, vec4(mix(existingRadiance.rgb, overflowRadiance, weight), 1));
}
