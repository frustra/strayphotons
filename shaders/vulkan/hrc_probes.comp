/*
 * Stray Photons - Copyright (C) 2025 Jacob Wirth
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

#version 460

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "../lib/types_common.glsl"
#include "../lib/util.glsl"

layout(binding = 0) uniform sampler3D voxelRadiance;
layout(binding = 1) uniform sampler3D voxelNormals;

layout(binding = 2, rgba16f) uniform image2DArray radianceOut;

INCLUDE_LAYOUT(binding = 3)
#include "lib/view_states_uniform.glsl"

layout(binding = 4) uniform VoxelStateUniform {
    VoxelState voxelInfo;
};

layout(constant_id = 0) const int CASCADE_NUM = 0;
layout(constant_id = 1) const int BASE_SAMPLES = 4;
layout(constant_id = 2) const float SAMPLE_LENGTH = 4;
layout(constant_id = 3) const float VOXEL_SCALE = 1;
layout(constant_id = 4) const uint RS_RESOLUTION_X = 256;
layout(constant_id = 5) const uint RS_RESOLUTION_Y = 256;
layout(constant_id = 6) const int DIRECTION = 0;

const vec2[4] AxisDirections2D = vec2[](
    vec2(0, 1),
	vec2(1, 0),
    vec2(0, -1),
    vec2(-1, 0)
);

#include "../lib/voxel_shared.glsl"
#include "lib/rc_shared.glsl"

void main() {
    if (any(greaterThanEqual(gl_GlobalInvocationID, imageSize(radianceOut)))) return;
    vec3 xyr = vec3(gl_GlobalInvocationID);

	vec2 axisDir = AxisDirections2D[DIRECTION];

    ViewState view = views[0];
    vec3 viewPos = view.invViewMat[3].xyz;
	viewPos.y -= voxelSampleOffset;
    vec3 viewVoxelPos = (voxelInfo.worldToVoxel * vec4(viewPos, 1.0)).xyz / vec3(voxelInfo.gridSize.x, 1, voxelInfo.gridSize.z);

	float skew = xyr.z / (imageSize(radianceOut).z - 1) * 2 - 1;
	vec2 sampleDir = axisDir + abs(axisDir.yx) * skew;
	vec2 endPos = xyr.xy + sampleDir * SAMPLE_LENGTH;
	vec2 cascadeScale = 1.0 / vec2(RS_RESOLUTION_X, RS_RESOLUTION_X);
	vec4 sampleValue = TraceGridLineScaled(xyr.xy * cascadeScale, endPos * cascadeScale, viewVoxelPos.y);
	// vec4 sampleValue = TraceSceneLine(startPos, endPos, viewVoxelPos.xz, VOXEL_SCALE * cascadeScale.x);

    imageStore(radianceOut, ivec3(xyr), sampleValue);
}
