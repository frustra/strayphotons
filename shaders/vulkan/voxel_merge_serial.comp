/*
 * Stray Photons - Copyright (C) 2024 Jacob Wirth
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

#version 460

layout(local_size_x = 1, local_size_y = 1) in;

#include "../lib/voxel_shared.glsl"

layout(binding = 0, rgba16f) uniform image3D voxelRadiance;
layout(binding = 1, rgba16f) uniform image3D voxelNormals;

layout(std430, binding = 2) buffer VoxelFragmentListMetadata {
    uint count;
    uint capacity;
    uint offset;
    VkDispatchIndirectCommand cmd;
};

layout(std430, binding = 3) buffer VoxelFragmentList {
    VoxelFragment fragmentList[];
};

layout(binding = 4, r32ui) uniform uimage3D fillCounters;

#include "../lib/types_common.glsl"
#include "../lib/util.glsl"
#include "../lib/voxel_shared.glsl"

layout(constant_id = 0) const int FRAGMENT_LIST_COUNT = 1;

void main() {
    for (int index = 0; index < count; index++) {
        ivec3 position = ivec3(fragmentList[index].position);
        vec3 overflowRadiance = vec3(fragmentList[index].radiance);
        vec3 overflowNormal = vec3(fragmentList[index].normal);
        vec4 existingRadiance = imageLoad(voxelRadiance, position);
        vec4 existingNormal = imageLoad(voxelNormals, position);

        uint overflowCount = imageLoad(fillCounters, position).r - FRAGMENT_LIST_COUNT + 1;
        float weight = 1.0f / (FRAGMENT_LIST_COUNT + existingRadiance.w - 1);
        // isNotLast = true if existingRadiance.w - 1 < overflowCount
        float isNotLast = 1 - step(overflowCount, existingRadiance.w - 1);
        vec3 newRadiance = mix(existingRadiance.rgb, overflowRadiance, weight);
        imageStore(voxelRadiance, position, vec4(newRadiance, isNotLast * existingRadiance.w + 1));
        imageStore(voxelNormals, position, vec4(mix(existingNormal.rgb, overflowNormal, weight), 1));
    }
}
