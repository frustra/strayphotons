/*
 * Stray Photons - Copyright (C) 2023 Jacob Wirth & Justin Li
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

#version 460

layout(local_size_x = 16, local_size_y = 16) in;

#include "../lib/types_common.glsl"
#include "../lib/voxel_shared.glsl"

layout(binding = 0) uniform G_VoxelState {
    VoxelState voxelInfo;
};

layout(std430, binding = 1) buffer VoxelFragmentListMetadata {
    uint count;
    uint capacity;
    uint offset;
    VkDispatchIndirectCommand cmd;
};

layout(std430, binding = 2) buffer VoxelFragmentList {
    VoxelFragment fragmentLists[]; // Already bound at +offset
};

layout(binding = 3, rgba16f) uniform image3D voxelLayer[6];

layout(constant_id = 0) const int FRAGMENT_LIST_INDEX = 1;

void main() {
    uint index = gl_WorkGroupID.x * (gl_WorkGroupSize.x * gl_WorkGroupSize.y) + gl_LocalInvocationIndex;
    if (index >= count) return;

    ivec3 position = ivec3(fragmentLists[index].position);
    vec3 overflowRadiance = vec3(fragmentLists[index].radiance);
    vec3 overflowNormal = mat3(voxelInfo.worldToVoxel) * vec3(fragmentLists[index].normal);

    for (int i = 0; i < 6; i++) {
        float alpha = max(0, dot(overflowNormal, -AxisDirections[i]));

        vec4 radiance = imageLoad(voxelLayer[i], position);
        radiance.a += alpha;
        if (radiance.a > 0) {
            radiance.rgb = mix(radiance.rgb, overflowRadiance * alpha, alpha / radiance.a);
            imageStore(voxelLayer[i], position, radiance);
        }
    }
}
