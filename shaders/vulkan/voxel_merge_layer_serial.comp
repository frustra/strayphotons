/*
 * Stray Photons - Copyright (C) 2024 Jacob Wirth
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

#version 460

layout(local_size_x = 1, local_size_y = 1) in;

#include "../lib/types_common.glsl"
#include "../lib/voxel_shared.glsl"

layout(binding = 0) uniform VoxelStateUniform {
    VoxelState voxelInfo;
};

layout(binding = 1) uniform LayerDataUniform {
    vec3 layerDirection;
    uint layerIndex;
};

layout(binding = 2, rgba16f) uniform image3D voxelLayer;

layout(std430, binding = 3) buffer VoxelFragmentListMetadata {
    uint count;
    uint capacity;
    uint offset;
    VkDispatchIndirectCommand cmd;
};

layout(std430, binding = 4) buffer VoxelFragmentList {
    VoxelFragment fragmentLists[]; // Already bound at +offset
};

layout(constant_id = 0) const int FRAGMENT_LIST_COUNT = 1;

void main() {
    for (int index = 0; index < count; index++) {
        ivec3 position = ivec3(fragmentLists[index].position);
        vec3 overflowRadiance = vec3(fragmentLists[index].radiance);
        vec3 overflowNormal = mat3(voxelInfo.worldToVoxel) * vec3(fragmentLists[index].normal);
        float alpha = max(0, dot(overflowNormal, -layerDirection));
        overflowRadiance *= alpha;

        vec4 radiance = imageLoad(voxelLayer, position);
        radiance.a += alpha;
        if (radiance.a > 0) {
            radiance.rgb = mix(radiance.rgb, overflowRadiance, alpha / radiance.a);
            imageStore(voxelLayer, position, radiance);
        }
    }
}
