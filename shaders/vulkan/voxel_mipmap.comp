#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "../lib/types_common.glsl"
#include "../lib/util.glsl"
#include "../lib/voxel_shared.glsl"

layout(binding = 0) uniform sampler3D voxelRadianceIn;
layout(binding = 1, rgba16f) writeonly uniform image3D voxelRadianceOut;
layout(binding = 2) uniform sampler3D voxelNormalsIn;
layout(binding = 3, rgba16f) writeonly uniform image3D voxelNormalsOut;

layout(constant_id = 0) const int MIP_LEVEL = 1;

void main() {
    ivec3 voxelOutPos = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(voxelOutPos, imageSize(voxelRadianceOut)))) return;

    ivec3 voxelInPos = voxelOutPos << 1;

    float alpha = 0.0;
    vec3 radiance = vec3(0);
    vec3 normal = vec3(0);
    float normalWeight = 0.0;

    for (int x = 0; x < 2; x++) {
        for (int y = 0; y < 2; y++) {
            for (int z = 0; z < 2; z++) {
                vec4 sampleValue = texelFetch(voxelRadianceIn, voxelInPos + ivec3(x, y, z), 0);
                vec4 sampleNormal = texelFetch(voxelNormalsIn, voxelInPos + ivec3(x, y, z), 0);

                radiance += sampleValue.rgb;
                normal += sampleNormal.xyz;
                normalWeight += sampleNormal.w;
                sampleValue.a = min(sampleValue.a, 1.0);
                alpha += sampleValue.a;
            }
        }
    }

    // Bias alpha so that 50% full is opaque
    alpha = saturate(alpha * 0.25);

    imageStore(voxelRadianceOut, ivec3(voxelOutPos), vec4(radiance * 0.125, alpha));
    imageStore(voxelNormalsOut, ivec3(voxelOutPos), vec4(normal, normalWeight));
}
