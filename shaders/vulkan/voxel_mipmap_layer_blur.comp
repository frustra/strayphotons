/*
 * Stray Photons - Copyright (C) 2023 Jacob Wirth & Justin Li
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include "../lib/types_common.glsl"
#include "../lib/util.glsl"
#include "../lib/voxel_shared.glsl"

layout(binding = 0) uniform LayerDataUniform {
    vec3 layerDirection;
    uint layerIndex;
};

layout(binding = 1, rgba16f) writeonly uniform image3D voxelLayerOut;

layout(binding = 2) uniform sampler3D voxelLayerIn;
layout(binding = 3) uniform sampler3D baseVoxelLayers[6];

void main() {
    ivec3 voxelPos = ivec3(gl_GlobalInvocationID);
    if (any(greaterThanEqual(voxelPos, imageSize(voxelLayerOut)))) return;

    // imageStore(voxelLayerOut, ivec3(voxelPos), texelFetch(voxelLayerIn, voxelPos, 0));
    // return;

    int stride = 1; // << max(0, int(layerIndex) - 2); // max(1, int(layerIndex) - 1);

    int axis = DominantAxis(layerDirection);
    if (axis < 0) {
        axis = -axis + 2;
    } else {
        axis -= 1;
    }
    ivec3 tangentAxisA = ivec3(AxisDirections[TangentAxisA[axis]]) * stride;
    ivec3 tangentAxisB = ivec3(AxisDirections[TangentAxisB[axis]]) * stride;

    vec3 forwardOffset = vec3(0.5 + AxisDirections[axis] * 0.5);
    vec3 gridSize = imageSize(voxelLayerOut);
    vec4[4] tangentSamples = vec4[](
        texture(baseVoxelLayers[OppositeAxis[TangentAxisA[axis]]], (voxelPos + forwardOffset) / gridSize),
        texture(baseVoxelLayers[OppositeAxis[TangentAxisB[axis]]], (voxelPos + forwardOffset) / gridSize),
        texture(baseVoxelLayers[TangentAxisA[axis]], (voxelPos + forwardOffset) / gridSize),
        texture(baseVoxelLayers[TangentAxisB[axis]], (voxelPos + forwardOffset) / gridSize));

    // Alpha acts as voxel fill count on first layer
    tangentSamples[0] /= max(1, tangentSamples[0].a);
    tangentSamples[1] /= max(1, tangentSamples[1].a);
    tangentSamples[2] /= max(1, tangentSamples[2].a);
    tangentSamples[3] /= max(1, tangentSamples[3].a);

    vec4[4] cornerSamples = vec4[]((tangentSamples[0] + tangentSamples[1]) * 0.5,
        (tangentSamples[0] + tangentSamples[3]) * 0.5,
        (tangentSamples[2] + tangentSamples[1]) * 0.5,
        (tangentSamples[2] + tangentSamples[3]) * 0.5);

    vec4[3][3] alphaSamples = vec4[][](vec4[](cornerSamples[0], tangentSamples[0], cornerSamples[1]),
        vec4[](tangentSamples[1], vec4(0), tangentSamples[3]),
        vec4[](cornerSamples[2], tangentSamples[2], cornerSamples[3]));

    vec4 sampleValue = vec4(0);
    float count = 0;
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            ivec3 samplePos = voxelPos + tangentAxisA * i + tangentAxisB * j;

            vec4 frontSample = alphaSamples[i + 1][j + 1] * vec4(vec3(0.707), 1);
            vec4 backSample = texelFetch(voxelLayerIn, samplePos, 0);
            if (layerIndex == 1) {
                backSample /= max(1, backSample.a);
            }

            vec4 combined = vec4(0);
            combined.a = frontSample.a + backSample.a * max(0, 1 - frontSample.a);
            combined.rgb = frontSample.rgb + backSample.rgb * max(0, 1 - frontSample.a);

            float weight = pow(0.95, stride * length(vec2(i, j)));
            count += weight;
            sampleValue += combined * weight;
        }
    }
    imageStore(voxelLayerOut, ivec3(voxelPos), sampleValue / count);
}
