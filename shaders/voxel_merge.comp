#version 430

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0) uniform atomic_uint overflowSize;

layout (binding = 0, rgba16f) uniform image3D voxelGrid;
layout (binding = 1, rgba16f) readonly uniform image2D voxelOverflow;

##import lib/util
##import voxel_shared

uniform int mipLevel = 0;

void main()
{
	uint index = gl_WorkGroupID.x * (gl_WorkGroupSize.x * gl_WorkGroupSize.y) + gl_LocalInvocationIndex;
	uint size = atomicCounter(overflowSize);
	if (index >= size) return;

	index *= 2;
	ivec3 position = ivec3(imageLoad(voxelOverflow, ivec2(index & MaxFragListMask[mipLevel], index >> FragListWidthBits[mipLevel])).xyz);
	vec3 overflowLuminance = imageLoad(voxelOverflow, ivec2((index & MaxFragListMask[mipLevel]) + 1, index >> FragListWidthBits[mipLevel])).rgb;
	vec4 existingLuminance = imageLoad(voxelGrid, position);
	existingLuminance.a += 1;

	float weight = 1.0 / existingLuminance.a;
	imageStore(voxelGrid, position, vec4(mix(existingLuminance.rgb, overflowLuminance, weight), existingLuminance.a));
}